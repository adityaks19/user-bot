const User = require('../models/User');
const { Markup } = require('telegraf');

/**
 * Handle start command
 * @param {Object} ctx - Telegram context
 */
const handleStart = async (ctx) => {
  try {
    const { id: telegramId, first_name, last_name } = ctx.from;
    
    // Find or create user
    let user = await User.findOne({ telegramId: telegramId.toString() });
    
    if (!user) {
      // Create new user
      user = new User({
        telegramId: telegramId.toString(),
        language: 'english',
        currentState: 'START',
        sessionData: {}
      });
      
      await user.save();
    } else {
      // Reset user state
      user.currentState = 'START';
      user.sessionData = {};
      await user.save();
    }
    
    // Send welcome message
    const welcomeMessage = {
      english: `Hey! Welcome to CTU Transport Bot ЁЯЪМ\n\nI can help you with:\n- Buying bus tickets\n- Purchasing bus passes\n- Tracking buses\n- Finding routes\n\nPlease select your preferred language:`,
      hindi: `CTU Transport Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ ЁЯЪМ\n\nрдореИрдВ рдЖрдкрдХреА рдЗрдирдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n- рдмрд╕ рдЯрд┐рдХрдЯ рдЦрд░реАрджрдирд╛\n- рдмрд╕ рдкрд╛рд╕ рдЦрд░реАрджрдирд╛\n- рдмрд╕реЛрдВ рдХреЛ рдЯреНрд░реИрдХ рдХрд░рдирд╛\n- рдорд╛рд░реНрдЧ рдЦреЛрдЬрдирд╛\n\nрдХреГрдкрдпрд╛ рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:`,
      punjabi: `CTU Transport Bot ри╡ри┐рй▒риЪ ридрйБри╣ри╛рибри╛ ри╕ри╡ри╛риЧрид ри╣рйИ ЁЯЪМ\n\nриорйИриВ ридрйБри╣ри╛рибрйА риЗри╣риири╛риВ ри╡ри┐рй▒риЪ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ:\n- римрй▒ри╕ риЯри┐риХриЯ риЦри░рйАрижригри╛\n- римрй▒ри╕ рикри╛ри╕ риЦри░рйАрижригри╛\n- римрй▒ри╕ри╛риВ риирйВрй░ риЯри░рйИриХ риХри░риири╛\n- ри░рйВриЯ ри▓рй▒ринригри╛\n\nриХри┐ри░рикри╛ риХри░риХрйЗ риЖрикригрйА рикри╕рй░рижрйАрижри╛ ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ:`
    };
    
    await ctx.reply(welcomeMessage[user.language] || welcomeMessage.english);
    
    // Show language options with inline keyboard
    await ctx.reply("Select your la / рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / риЖрикригрйА ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ:", 
      Markup.inlineKeyboard([
        [Markup.button.callback('English', 'lang_english')],
        [Markup.button.callback('рд╣рд┐рдВрджреА (Hindi)', 'lang_hindi')],
        [Markup.button.callback('рикрй░риЬри╛римрйА (Punjabi)', 'lang_punjabi')]
      ])
    );
    
    // Update user state
    await User.findOneAndUpdate(
      { telegramId: telegramId.toString() },
      { currentState: 'SELECTING_LANGUAGE' }
    );
  } catch (error) {
    console.error('Error in handleStart:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle language selection callback
 * @param {Object} ctx - Telegram context
 */
const handleLanguageCallback = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    const callbackData = ctx.callbackQuery.data;
    
    // Determine selected language
    let language;
    if (callbackData === 'lang_english') {
      language = 'english';
    } else if (callbackData === 'lang_hindi') {
      language = 'hindi';
    } else if (callbackData === 'lang_punjabi') {
      language = 'punjabi';
    } else {
      // Invalid selection, default to English
      language = 'english';
    }
    
    // Update user language
    await User.findOneAndUpdate(
      { telegramId: telegramId.toString() },
      { language }
    );
    
    // Show confirmation message
    const confirmationMessage = {
      english: 'Language set to English.',
      hindi: 'рднрд╛рд╖рд╛ рд╣рд┐рдВрджреА рдкрд░ рд╕реЗрдЯ рдХреА рдЧрдИред',
      punjabi: 'ринри╛ри╕ри╝ри╛ рикрй░риЬри╛римрйА ридрйЗ ри╕рйИрй▒риЯ риХрйАридрйА риЧриИред'
    };
    
    await ctx.answerCbQuery(confirmationMessage[language]);
    await ctx.editMessageText(confirmationMessage[language]);
    
    // Show main menu
    await showMainMenu(ctx, language);
  } catch (error) {
    console.error('Error in handleLanguageCallback:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Show main menu
 * @param {Object} ctx - Telegram context
 * @param {string} language - User language
 */
const showMainMenu = async (ctx, language) => {
  try {
    const { id: telegramId } = ctx.from;
    
    // Main menu message
    const mainMenuMessage = {
      english: 'Main Menu:',
      hindi: 'рдореБрдЦреНрдп рдореЗрдиреВ:',
      punjabi: 'риорйБрй▒риЦ риорйЗриирйВ:'
    };
    
    // Create inline keyboard for main menu
    const mainMenuKeyboard = [
      [Markup.button.callback('ЁЯОл Buy Bus Ticket', 'menu_buy_ticket')],
      [Markup.button.callback('ЁЯУЭ Buy Bus Pass', 'menu_buy_pass')],
      [Markup.button.callback('ЁЯФН View My Passes', 'menu_view_passes')],
      [Markup.button.callback('ЁЯЪМ Track Bus', 'menu_track_bus')],
      [Markup.button.callback('ЁЯЧ║я╕П View Routes', 'menu_view_routes')],
      [Markup.button.callback('ЁЯУЮ Customer Support', 'menu_customer_support')]
    ];
    
    // Localize button text
    if (language === 'hindi') {
      mainMenuKeyboard[0][0] = Markup.button.callback('ЁЯОл рдмрд╕ рдЯрд┐рдХрдЯ рдЦрд░реАрджреЗрдВ', 'menu_buy_ticket');
      mainMenuKeyboard[1][0] = Markup.button.callback('ЁЯУЭ рдмрд╕ рдкрд╛рд╕ рдЦрд░реАрджреЗрдВ', 'menu_buy_pass');
      mainMenuKeyboard[2][0] = Markup.button.callback('ЁЯФН рдореЗрд░реЗ рдкрд╛рд╕ рджреЗрдЦреЗрдВ', 'menu_view_passes');
      mainMenuKeyboard[3][0] = Markup.button.callback('ЁЯЪМ рдмрд╕ рдЯреНрд░реИрдХ рдХрд░реЗрдВ', 'menu_track_bus');
      mainMenuKeyboard[4][0] = Markup.button.callback('ЁЯЧ║я╕П рдорд╛рд░реНрдЧ рджреЗрдЦреЗрдВ', 'menu_view_routes');
      mainMenuKeyboard[5][0] = Markup.button.callback('ЁЯУЮ рдЧреНрд░рд╛рд╣рдХ рд╕рд╣рд╛рдпрддрд╛', 'menu_customer_support');
    } else if (language === 'punjabi') {
      mainMenuKeyboard[0][0] = Markup.button.callback('ЁЯОл римрй▒ри╕ риЯри┐риХриЯ риЦри░рйАрижрйЛ', 'menu_buy_ticket');
      mainMenuKeyboard[1][0] = Markup.button.callback('ЁЯУЭ римрй▒ри╕ рикри╛ри╕ риЦри░рйАрижрйЛ', 'menu_buy_pass');
      mainMenuKeyboard[2][0] = Markup.button.callback('ЁЯФН риорйЗри░рйЗ рикри╛ри╕ ри╡рйЗриЦрйЛ', 'menu_view_passes');
      mainMenuKeyboard[3][0] = Markup.button.callback('ЁЯЪМ римрй▒ри╕ риЯри░рйИриХ риХри░рйЛ', 'menu_track_bus');
      mainMenuKeyboard[4][0] = Markup.button.callback('ЁЯЧ║я╕П ри░рйВриЯ ри╡рйЗриЦрйЛ', 'menu_view_routes');
      mainMenuKeyboard[5][0] = Markup.button.callback('ЁЯУЮ риЧри╛ри╣риХ ри╕ри╣ри╛риЗридри╛', 'menu_customer_support');
    }
    
    // Send main menu
    await ctx.reply(mainMenuMessage[language] || mainMenuMessage.english, 
      Markup.inlineKeyboard(mainMenuKeyboard)
    );
    
    // Update user state
    await User.findOneAndUpdate(
      { telegramId: telegramId.toString() },
      { currentState: 'MAIN_MENU' }
    );
  } catch (error) {
    console.error('Error in showMainMenu:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle main menu callbacks
 * @param {Object} ctx - Telegram context
 */
const handleMainMenuCallback = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    const callbackData = ctx.callbackQuery.data;
    const user = await User.findOne({ telegramId: telegramId.toString() });
    const language = user?.language || 'english';
    
    await ctx.answerCbQuery();
    
    // Handle different menu options
    switch (callbackData) {
      case 'menu_buy_ticket':
        // Go directly to source region selection
        const ticketController = require('./ticketController');
        await ticketController.showSourceRegionSelection(ctx);
        break;
        
      case 'menu_buy_pass':
        const passController = require('./passController');
        await passController.startPassPurchase(ctx);
        break;
        
      case 'menu_view_passes':
        const passController2 = require('./passController');
        await passController2.viewPurchasedPasses(ctx);
        break;
        
      case 'menu_track_bus':
        const busController = require('./busController');
        await busController.startBusTracking(ctx);
        break;
        
      case 'menu_view_routes':
        const busController2 = require('./busController');
        await busController2.startRouteInfo(ctx);
        break;
        
      case 'menu_customer_support':
        await handleCustomerSupport(ctx, language);
        break;
        
      default:
        await ctx.reply('Invalid option. Please try again.');
        await showMainMenu(ctx, language);
    }
  } catch (error) {
    console.error('Error in handleMainMenuCallback:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle customer support
 * @param {Object} ctx - Telegram context
 * @param {string} language - User language
 */
const handleCustomerSupport = async (ctx, language) => {
  try {
    // Customer support message
    const supportMessage = {
      english: 'For customer support, please contact:\n\n' +
               'ЁЯУЮ Helpline: 0172-2704124\n' +
               'ЁЯУз Email: ctu-chd@nic.in\n' +
               'ЁЯМР Website: https://chdctu.gov.in\n\n' +
               'Operating Hours: 9:00 AM - 5:00 PM (Monday to Saturday)',
      hindi: 'рдЧреНрд░рд╛рд╣рдХ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ:\n\n' +
             'ЁЯУЮ рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди: 0172-2704124\n' +
             'ЁЯУз рдИрдореЗрд▓: ctu-chd@nic.in\n' +
             'ЁЯМР рд╡реЗрдмрд╕рд╛рдЗрдЯ: https://chdctu.gov.in\n\n' +
             'рдХрд╛рд░реНрдп рд╕рдордп: рд╕реБрдмрд╣ 9:00 - рд╢рд╛рдо 5:00 (рд╕реЛрдорд╡рд╛рд░ рд╕реЗ рд╢рдирд┐рд╡рд╛рд░)',
      punjabi: 'риЧри╛ри╣риХ ри╕ри╣ри╛риЗридри╛ ри▓риИ, риХри┐ри░рикри╛ риХри░риХрйЗ ри╕рй░рикри░риХ риХри░рйЛ:\n\n' +
               'ЁЯУЮ ри╣рйИри▓рикри▓ри╛риИрии: 0172-2704124\n' +
               'ЁЯУз риИриорйЗри▓: ctu-chd@nic.in\n' +
               'ЁЯМР ри╡рйИрй▒римри╕ри╛риИриЯ: https://chdctu.gov.in\n\n' +
               'риХрй░рио рижрйЗ риШрй░риЯрйЗ: ри╕ри╡рйЗри░рйЗ 9:00 - ри╕ри╝ри╛рио 5:00 (ри╕рйЛриори╡ри╛ри░ ридрйЛриВ ри╕ри╝риирйАри╡ри╛ри░)'
    };
    
    await ctx.editMessageText(supportMessage[language] || supportMessage.english, 
      Markup.inlineKeyboard([
        [Markup.button.callback('Back to Main Menu', 'back_to_menu')]
      ])
    );
    
    // Update user state
    await User.findOneAndUpdate(
      { telegramId: ctx.from.id.toString() },
      { currentState: 'CUSTOMER_SUPPORT' }
    );
  } catch (error) {
    console.error('Error in handleCustomerSupport:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle help command
 * @param {Object} ctx - Telegram context
 */
const handleHelp = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    const user = await User.findOne({ telegramId: telegramId.toString() });
    const language = user?.language || 'english';
    
    // Help message
    const helpMessage = {
      english: 'Here\'s how to use this bot:\n\n' +
               'тАв /start - Start the bot\n' +
               'тАв /menu - Show main menu\n' +
               'тАв /language - Change language\n' +
               'тАв /help - Show this help message\n' +
               'тАв /reset - Reset the conversation\n\n' +
               'You can navigate through the menus by tapping on the buttons.',
      hindi: 'рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:\n\n' +
             'тАв /start - рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ\n' +
             'тАв /menu - рдореБрдЦреНрдп рдореЗрдиреВ рджрд┐рдЦрд╛рдПрдВ\n' +
             'тАв /language - рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ\n' +
             'тАв /help - рдпрд╣ рд╕рд╣рд╛рдпрддрд╛ рд╕рдВрджреЗрд╢ рджрд┐рдЦрд╛рдПрдВ\n' +
             'тАв /reset - рд╡рд╛рд░реНрддрд╛рд▓рд╛рдк рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ\n\n' +
             'рдЖрдк рдмрдЯрди рдкрд░ рдЯреИрдк рдХрд░рдХреЗ рдореЗрдиреВ рдореЗрдВ рдиреЗрд╡рд┐рдЧреЗрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
      punjabi: 'риЗри╕ римрйЛриЯ рижрйА ри╡ри░ридрйЛриВ риХри┐ри╡рйЗриВ риХри░риирйА ри╣рйИ:\n\n' +
               'тАв /start - римрйЛриЯ ри╕ри╝рйБри░рйВ риХри░рйЛ\n' +
               'тАв /menu - риорйБрй▒риЦ риорйЗриирйВ рижри┐риЦри╛риУ\n' +
               'тАв /language - ринри╛ри╕ри╝ри╛ римрижри▓рйЛ\n' +
               'тАв /help - риЗри╣ риорижриж ри╕рй░рижрйЗри╕ри╝ рижри┐риЦри╛риУ\n' +
               'тАв /reset - риЧрй▒ри▓римри╛рид ри░рйАри╕рйИриЯ риХри░рйЛ\n\n' +
               'ридрйБри╕рйАриВ римриЯриири╛риВ ридрйЗ риЯрйИрик риХри░риХрйЗ риорйЗриирйВ ри╡ри┐рй▒риЪ риирйИри╡рйАриЧрйЗриЯ риХри░ ри╕риХрижрйЗ ри╣рйЛред'
    };
    
    await ctx.reply(helpMessage[language] || helpMessage.english, 
      Markup.inlineKeyboard([
        [Markup.button.callback('Back to Main Menu', 'back_to_menu')]
      ])
    );
  } catch (error) {
    console.error('Error in handleHelp:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle language command
 * @param {Object} ctx - Telegram context
 */
const handleLanguageCommand = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    
    // Show language options with inline keyboard
    await ctx.reply("Select your language / рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ / риЖрикригрйА ринри╛ри╕ри╝ри╛ риЪрйБригрйЛ:", 
      Markup.inlineKeyboard([
        [Markup.button.callback('English', 'lang_english')],
        [Markup.button.callback('рд╣рд┐рдВрджреА (Hindi)', 'lang_hindi')],
        [Markup.button.callback('рикрй░риЬри╛римрйА (Punjabi)', 'lang_punjabi')]
      ])
    );
    
    // Update user state
    await User.findOneAndUpdate(
      { telegramId: telegramId.toString() },
      { currentState: 'SELECTING_LANGUAGE' }
    );
  } catch (error) {
    console.error('Error in handleLanguageCommand:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle menu command
 * @param {Object} ctx - Telegram context
 */
const handleMenuCommand = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    const user = await User.findOne({ telegramId: telegramId.toString() });
    const language = user?.language || 'english';
    
    // Show main menu
    await showMainMenu(ctx, language);
  } catch (error) {
    console.error('Error in handleMenuCommand:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

/**
 * Handle back to menu callback
 * @param {Object} ctx - Telegram context
 */
const handleBackToMenuCallback = async (ctx) => {
  try {
    const { id: telegramId } = ctx.from;
    const user = await User.findOne({ telegramId: telegramId.toString() });
    const language = user?.language || 'english';
    
    await ctx.answerCbQuery();
    
    // Show main menu
    await showMainMenu(ctx, language);
  } catch (error) {
    console.error('Error in handleBackToMenuCallback:', error);
    await ctx.reply('Sorry, something went wrong. Please try again.');
  }
};

module.exports = {
  handleStart,
  handleLanguageCallback,
  handleMainMenuCallback,
  showMainMenu,
  handleHelp,
  handleLanguageCommand,
  handleMenuCommand,
  handleBackToMenuCallback,
  handleCustomerSupport
};
